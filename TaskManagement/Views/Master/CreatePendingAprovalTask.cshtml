@model BL.TaskModel

@{
    ViewBag.Title = "CreatePendingAprovalTask";
}

<h2>Pending Approval Task Details</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @if (Model.TaskId > 0)
        {
            <span class="label label-success" style="margin-left:15px;font:bold;color:limegreen"> Status : @Model.Status</span>
        }
        <hr />
        @Html.HiddenFor(x => x.StatusId, new { id = "StatusId" })
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group" hidden>
            @Html.LabelFor(model => model.TaskId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TaskId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TaskId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label>Task Name</label>
            <input type="text" class="form-control" id="TaskName" name="TaskName" placeholder="Task Name" value="@Model.TaskName" readonly>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.TaskDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-5">
                @*<input type="date" id="TaskDate" name="TaskDate" value="@Model.TaskDate.ToString("dd-mm-yyyy")" min="0">*@
                <input type="date" name="TaskDate" id="TaskDate" value="@Model.TaskDate.ToString("yyyy-MM-dd")" placeholder="Select a date" class="form-control datepicker" data-dateformat="yyyy-MM-dd" readonly>
                @Html.ValidationMessageFor(model => model.TaskDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label for="exampleTextarea1">Task Description</label>
            <textarea class="form-control" id="TaskDescription" name="TaskDescription" rows="10" cols="5" placeholder="Description" readonly>@Model.TaskDescription</textarea>
        </div>
        <div class="form-group">
            <label>cc Mail</label>
            <input type="text" class="form-control" id="ccMail" name="ccMail" placeholder="cc Mail" value="@Model.ccMail" readonly>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.isActive, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-5">
                <div class="checkbox">
                    @Html.EditorFor(model => model.isActive)
                    @Html.ValidationMessageFor(model => model.isActive, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Remark, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Remark, new { htmlAttributes = new { @class = "form-control" }, maxlength = 200 })
                @Html.ValidationMessageFor(model => model.ccMail, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-5">
                <input type="submit" value="Approve" class="btn btn-success" onclick="SetStatus('3')" />
                &nbsp; &nbsp; &nbsp; &nbsp;               
                <input type="submit" class="btn btn-primary" value="Reject" onclick="SetStatus('4');" />
                &nbsp; &nbsp; &nbsp; &nbsp;
                <a class="btn btn-warning" href="@Url.Action("GetPendingApprovalTaskList","Master")">Back to List</a>
            </div>
        </div>

    </div>
}
<script>
    function SetStatus(Status)
    {
        $("#StatusId").val(Status);
    }
</script>



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
